function [Y,Xf,Af] = annRhoOfExxEyyTheta_version2(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Jun-2017 12:08:39.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.3325690440169828399;1.4295129989583759134;0.79843141769089265303;-0.9203943312278439759;0.33670705657500138441;-0.48512299310158257803;2.3005965488515132122;-2.1173258303039901307;2.5317876461272343924;3.2286018204624666872];
IW1_1 = [0.25459379958104755293 -1.8845430967336702643 2.4587973390007884511;-3.4351314708632485484 -0.15800213880144575729 0.014160430940982097689;-1.2055403107290736386 -1.7642727622675016264 -2.2015165769866631429;1.765663883298927983 -0.13171509932355682237 -2.6839097119524235602;-0.80219931192387861074 -0.45820813331251480927 -0.91189496532577785093;-1.9920707592354960358 0.46897314171546822248 1.4197718925622824226;1.3757212472926234614 0.41890270523412997949 -0.84196560178638202299;-3.0696560930886551688 0.70847455218159083312 0.11693042566522446335;1.0713999841796377765 1.4164650853310902789 0.23925638713616392828;2.4505369624136275064 -0.70462468776028286399 -1.4149791052936695479];

% Layer 2
b2 = -0.80392824817128383241;
LW2_1 = [-0.084166423132136625185 -0.052112683763851946894 0.083090160394946252498 0.034638389068210879984 -0.37776178597552156901 -0.11215357990877954097 0.41255387914687385864 0.060126205120649159341 1.1562845319546544154 0.018947682896024269084];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.20929538942145;
y1_step1.xoffset = 0.094734;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
