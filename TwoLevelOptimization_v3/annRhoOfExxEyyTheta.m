function [Y,Xf,Af] = annRhoOfExxEyyTheta(X,~,~)
%ANNRHOOFEXXEYYTHETA neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-May-2017 22:06:43.
% 
% [Y] = annRhoOfExxEyyTheta(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [8747.2;0.26472;0.00304816339744829];
x1_step1.gain = [5.32626005997369e-05;4.45615568899635e-05;2.56240776132812];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5727193635065668254;1.8069396956839143265;0.91498596401186649274;-0.44921005948960757159;0.38800093331753676695;-0.99012103140865315165;1.8786804606413454177;-1.19334940093177444;2.7508657556424829238;3.2139669335824332386];
IW1_1 = [-0.15804733506537307908 -2.3703243234508102333 2.073203453913230021;-3.3239284276584184497 -0.29772440255700372003 0.3812512801357856862;-1.3579995943977452022 -3.2188657676023635368 -2.0494912092191372999;1.8849453781532414798 -1.0073778945024114417 -2.131384422630433928;-0.46439480937280364081 -1.5371953458751805854 -2.6243223028135598263;-2.832796278377175625 -0.71462238629515806299 1.4307206668626752943;1.3572207491563648141 2.4639279666098494737 -1.3511748011044169004;-2.2963230367104010554 1.8404615374459629695 0.40531644689106310908;1.3505495608981474831 0.72275245936324872265 2.3483502712836203941;2.4577798629052782786 -1.0819262796814790306 -1.9398018540026149559];

% Layer 2
b2 = 0.33876502119750928621;
LW2_1 = [-0.39600983239861475838 -0.27257605244633476005 0.55168123653110012761 -0.42642028012590216246 -0.086674378286360528878 0.12999097479454727044 0.44760696418920714601 -1.0793769330847056143 -0.1875379299360211971 -0.94990470012256200683];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.27798311771522;
y1_step1.xoffset = 0.0018341;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
