function [Y,Xf,Af] = annRhoOfExxEyyTheta(X,~,~)
%ANNRHOOFEXXEYYTHETA neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-May-2017 14:36:11.
% 
% [Y] = annRhoOfExxEyyTheta(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [352.93;0.0028582;8.16339744824646e-06];
x1_step1.gain = [2.00738577448004e-05;2.00138101010044e-05;2.5497100393252];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.2311968210076056351;2.5495519211542418958;1.1979796007115406375;-1.901314667050515661;0.76102461585308156522;-1.9495801187547008304;2.2673324331864703751;-2.9543850428525795238;2.4866984986682290071;1.8085783593441204786];
IW1_1 = [0.25272590276197953729 -1.8293298157404989102 1.9765588459888052686;-2.5275032482270498591 0.10568576302046384097 1.4803620864326050288;-0.82712950890672942705 -1.3495650112674579812 -2.132911547135953878;1.3194444605533879322 -0.27373748754154481055 -2.0885019700907387907;-0.51486792226356037361 -1.2669874114809984711 -3.0367291709721278004;-3.0897199122740874877 -0.36132317045754192009 1.43944981262043048;2.2065103555253053891 1.7175888428442647182 -1.5622059331844964092;-1.9077905373514958409 -0.67656025444313250272 0.074099167990338818401;1.833977564238643998 0.94317770101710807218 2.8898819074391810524;2.2189179935625720219 -1.6978875554681238658 -1.1611852816271694966];

% Layer 2
b2 = -0.70524031033002876345;
LW2_1 = [-0.33625370594324166529 -0.28729929491625116889 -0.40748414977155666961 -0.29521163078993195583 0.30387512867078975143 0.8704224416844840162 0.85000492178994979664 -2.9641836572915303272 -0.10079355514351925893 -1.0589252992614694993];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.22873508140455;
y1_step1.xoffset = 0.1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
