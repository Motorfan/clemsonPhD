function [Y,Xf,Af] = annOutput_LookUpTable(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jun-2017 15:47:00.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [22.060838440023047724;6.1052423704110712066;1.874804354161565989;-0.95249288911952922909;0.95374019389109276901;-0.81966953381051721461;4.9208823093750293509;-6.0979823733365661198;1.2413178567203559943;6.7352318128806718533];
IW1_1 = [-13.131640582283200303 -17.120810193711545111 0.16740908178936439454;-1.7979922844943085902 2.4871649356175224987 5.727577786026865958;-3.1738778396039930563 -1.1821346131229315546 -0.78165520643345975937;0.55635568744523378193 -1.5697132897563683684 -3.9404881485844898137;-1.845064870748551078 -0.68597319249575505751 -0.88673115577249761454;-2.0247643564662167748 -0.55554393496662535235 0.99184616317427809484;1.0955890689956924167 2.5325646039704809986 0.12013115890382923545;-9.0241021455055321354 3.4880670951721812756 2.4662399321302830302;1.0517415598241466324 1.3729866828869916606 1.0410349847776108057;10.817915561921825685 -4.6107600911224357887 -2.7051374897919178153];

% Layer 2
b2 = -6.1260166239224700391;
LW2_1 = [-0.10884387456774306802 -0.045922613467425876799 0.17875730690388796917 0.037741053728260136324 -0.23035783023848696582 -0.16244933882784962087 6.4599458446578070792 -3.1143200634876766486 0.21243971173178657907 -2.8824001769310654275];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
