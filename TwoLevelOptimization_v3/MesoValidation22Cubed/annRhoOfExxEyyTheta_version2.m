function [Y,Xf,Af] = annRhoOfExxEyyTheta_version2(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 25-May-2017 15:45:18.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0.0373981633974483];
x1_step1.gain = [2e-05;2e-05;2.67378366128905];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.9539494782321469302;2.697500345951422851;1.2894543693633622183;-1.5723583532060132484;1.265449854449908651;1.432500203946614592;1.9962548674014315431;-6.3236914810284661215;2.4366601165120105321;7.8894582772322543462];
IW1_1 = [0.7659047214072364218 -3.0974906419661345502 6.6903727499143634816;-2.174523992417454199 0.6888159613735964637 0.84336670240432332069;-2.8936846040058741281 -1.1607890079289007179 -1.5757347280232905096;1.5935636641089505616 0.44890247197409588464 -1.8670376404925403957;-3.3690327728623135073 -0.96980436443412809666 -1.3042544148903254531;-5.0570560680164442502 0.37977443621219453274 0.24444993575642373629;3.0279103252031238647 0.9484292175224979804 0.005640608604078199001;-2.0447006073481190924 -3.6239992350779166586 -0.060970030915148062944;-1.8513311631876778751 0.62053279086704604683 0.80755283208524686334;2.704721229497635715 5.1596572197132628546 0.14562639109297562112];

% Layer 2
b2 = -5.465764935092100707;
LW2_1 = [-0.027618185193701606794 -2.2175427921618862115 0.27106906595766461221 0.046598201426179854112 -0.35625026130597975405 -0.12224341564809958205 0.25353110365625536327 -8.0333656321935329458 2.6583730182649580875 -2.3556396301923965275];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 2.7756e-17;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
