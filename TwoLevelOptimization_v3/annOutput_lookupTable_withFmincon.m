function [Y,Xf,Af] = annOutput_lookupTable_withFmincon(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 15-Jun-2017 15:00:17.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.1839374063249072933;2.1731302462689257027;2.0497221936845120283;-0.77164718850484459445;0.38093215753779807731;0.061949245347030945652;0.939077104137897134;-2.7064806249493829071;1.3407337079619456865;3.0259997777331122393];
IW1_1 = [-0.13789165247260617986 -1.736603189148213211 2.1319898066475166942;-2.6467119164004659915 -0.21027648173076377014 0.69227795206319731047;-0.92151203101670153828 -2.1141997092132638336 -1.5227190692636403124;0.73102356392888134806 -0.45821003647434604966 -1.9025596324190503505;0.11573580818558776295 -0.9579561516028403112 -0.95362655238055360485;-2.2587379903323880903 0.22160364218752112708 0.23977760267631320623;0.67319646239086972095 0.71016785814554883594 -0.88612289645746489253;-1.7126254790764208202 -1.3735744768464490662 0.10990597300832581629;0.29757089755683818755 0.76790024568251169512 0.61878391334812465896;2.5332716077452892556 -1.2106164823112535167 -1.0401983671965568945];

% Layer 2
b2 = -0.9679504287491532688;
LW2_1 = [-0.034578899937065400716 -0.063188101044916913929 0.032482380637659354072 0.060811167124938711459 -0.19564359080717103057 -0.12744361454788513677 0.19311720974146109886 -0.55086577458892149739 0.50023035274336891121 0.56570629203262767781];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.00000004411;
y1_step1.xoffset = 2.2055e-08;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
