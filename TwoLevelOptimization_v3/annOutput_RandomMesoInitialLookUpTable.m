function [Y,Xf,Af] = annOutput_RandomMesoInitialLookUpTable(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 19-Jun-2017 15:34:06.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.81000084708168595959;1.5219875213347207055;1.8975410220751569579;1.0059290932330779977;1.368009080477062378;-1.395924036893193998;8.4026433469819892252;-3.5615070570830074104;1.4326164686213869182;3.8941518206579801564];
IW1_1 = [-0.057445606659819882511 -1.0985445553165800181 0.57083898107272457167;-2.6519862582744337942 0.90880745003115948055 0.73669855829868291508;-0.41044210876988335146 0.56727421410020428816 -1.1737893408072321844;-0.25528890708154805544 1.0788283046435551693 -0.75553968312398922524;-0.40783968549606891552 0.66087794907900143659 -0.8121517342006826512;-1.5700641767959730988 -1.4423683898138000004 0.3331273125140200575;4.9706728043385135507 2.418322498334827042 0.21716407498182602187;-4.5195725369416042128 0.74752088066779842634 0.56551987477438547813;1.9925728156240432032 -0.075287648231244425068 3.1513406307257652017;3.1913776904040402904 0.68503748802084818426 -0.52999015869869869899];

% Layer 2
b2 = -2.3578302514105566878;
LW2_1 = [-0.17275063725736874987 -0.055473798212279948339 0.99747826434199360346 0.73815148206462755098 -1.9948642294915077677 -0.25703757688279754712 2.6048454143645098924 1.5599457956492961408 0.067843561814231290175 2.0995133011629079078];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
