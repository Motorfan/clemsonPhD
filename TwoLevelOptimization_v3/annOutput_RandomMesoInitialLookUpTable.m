function [Y,Xf,Af] = annOutput_RandomMesoInitialLookUpTable(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 12-Jun-2017 16:06:45.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.66658417816111970033;1.4717612669656816582;1.1754662773593649305;-0.3787001054926631971;0.64419741326003832071;-1.0887932872477534829;4.8928528384155027808;-3.7642030155121708468;2.4874784491348993498;2.4188959948224466601];
IW1_1 = [1.3250572644178277848 -0.92178190776165946918 0.47417992170643213923;-1.9869999813247578579 0.66846692545681518638 0.16109074307921530944;-0.43265376990242992994 -0.73552274062724465331 -2.2862796843842709826;-0.37589990718864901842 0.68352027609598442481 -3.0664910481766192163;-0.57334883294661309616 -0.16259252455028522233 -1.2629659853786687762;-1.2159695345585408432 -0.090537443908053558128 0.20605481783996204559;2.1782192627274366004 2.3662087740628301447 -0.20249111185443988137;-4.5755392339752818387 1.4676439839235211338 -0.51734526601829322612;1.6011654569313207297 2.3224072598378273646 2.3666261934873373818;2.883905046091565616 -0.46431106337109218085 0.0099483228609195430148];

% Layer 2
b2 = -1.9161438772052905577;
LW2_1 = [-0.2500214121227221642 -0.18376744865196126266 0.12336536516338228453 0.047781344591613386652 -0.39194906927595107859 -1.074842701856502547 1.9614051039856594816 -1.3705380393953028317 0.10396090140571892513 -1.5999720374828243497];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
