function [Y,Xf,Af] = annOutput_matUpdateV1(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-May-2017 17:49:43.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.4912209590360845368;1.7446254657127016063;1.7231983690322520975;-0.44773051383589063112;1.1963624403222052894;-0.64447359414740812422;7.6446229836366601518;-1.4709488384412694462;2.0366366831622118028;4.0682736752519526036];
IW1_1 = [-2.8140927271819848876 -2.6191721354089776419 0.24296795266977344596;-2.8848098276337847956 -1.0394461849578215951 2.162868618095483253;-2.8451787392395098131 -3.1469859693588277949 -1.7294066829741521207;0.73734077803502118265 -1.5922476607047983954 -2.1771819581626714601;-2.3805406619854894146 -2.2007727937722978417 -0.64624432111565366377;-2.840154784245875863 0.58996141272562308 0.61536508909636200571;0.93129280482225318405 6.3289246063242936557 -1.5209825512903574207;-3.0223372057789599232 0.85084718102411027729 -0.69361028070738539597;1.1760125530073031186 0.78203934531967833621 0.11428223924431241132;1.3881267095275549028 1.6831567620391716389 -1.2519853895222778917];

% Layer 2
b2 = -0.84517074542060810494;
LW2_1 = [0.047405790070287993909 -0.015900000478089846428 0.11478470557573317024 -0.013044844031574284737 -0.31193445800351654595 -0.071702009504610919599 0.51918354394633459137 0.22043938807457491569 1.8474253193064034129 -0.57669744606987205504];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.22222222222222;
y1_step1.xoffset = 0.1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
