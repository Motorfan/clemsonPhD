function [Y,Xf,Af] = annRhoOfExxEyyTheta_version2(X,~,~)
%ANNRHOOFEXXEYYTHETA_VERSION2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 19-May-2017 15:41:29.
% 
% [Y] = annRhoOfExxEyyTheta_version2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;1.83660255170803e-06];
x1_step1.gain = [2e-05;2e-05;2.54647313470843];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5554699498260893265;2.958815110626626943;0.87995101839264799892;-1.7965347473324153604;0.84916511410157569095;0.33372686307288579322;2.9799559385945348922;-4.6552576158933876016;2.1935765047653568161;3.4850549236556629396];
IW1_1 = [0.39188439078764009116 -1.8326462232906355343 2.7367019358071544843;-2.2508532227983759633 0.66451639916471827441 1.1069090826260508109;-2.1399528859805774239 -1.326655519597516264 -1.9569931002584262103;-0.050987349234201465031 -1.5991428506946945287 -2.3712129425527690429;-2.5070179582334546353 -0.46055034733975308558 -1.3122833314778210578;-3.0410179204601566205 -1.1422735385480808912 -0.18297777050294228296;1.5558809119524230624 1.4403622784100789112 -0.11830179975987713259;-3.0299118454722098193 -0.78718836323645025033 -0.75434446684275335837;0.5348372022535093917 1.6062174735678440562 2.0060128664687413291;2.7733403148402206995 -0.50882980267229838134 -0.89564875992708092856];

% Layer 2
b2 = -0.74225749912454463963;
LW2_1 = [-0.044241894261147760026 0.14970428376567865292 0.15526064045691789772 0.053979713634841663961 -0.24970268635632345 -0.16606877882307205518 1.3947775905901720339 -0.17166340803939383886 0.097430085146161471421 -0.21940043374588003022];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.22222222222222;
y1_step1.xoffset = 0.1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
